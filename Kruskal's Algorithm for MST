import sys
import heapq
import random
import timeit
import matplotlib.pyplot as plt
import networkx as nx
from collections import defaultdict

def find(parent, i):
    if parent[i] != i:
        parent[i] = find(parent, parent[i])
    return parent[i]

def union(parent, rank, i, j):
    root_i = find(parent, i)
    root_j = find(parent, j)

    if root_i != root_j:
        if rank[root_i] < rank[root_j]:
            parent[root_i] = root_j
        elif rank[root_i] > rank[root_j]:
            parent[root_j] = root_i
        else:
            parent[root_j] = root_i
            rank[root_i] += 1

def kruskal_mst(graph, distance,i):
    vertices = len(graph)
    parent = [i for i in range(vertices)]
    rank = [0] * vertices

    result = []
    non_mst_edges = []
    edges_with_weights = []

    for u in range(vertices):
        for v, weight in graph[u]:
            edges_with_weights.append((u, v, weight))

    edges_with_weights = sorted(edges_with_weights, key=lambda item: item[2])

    e = 0
    index = 0

    while e < vertices - 1:
        u, v, w = edges_with_weights[index]
        index += 1
        x = find(parent, u)
        y = find(parent, v)

        if x != y:
            e += 1
            result.append((u, v, w))
            union(parent, rank, x, y)
        else:
            non_mst_edges.append((u, v, w))

    total_distance = 0
    for u,v, weight in result:
        total_distance += weight
    distance.append(total_distance)
    if i==0:
        return
    return result, non_mst_edges

if __name__ == '__main__':

    distance = []
    num_trials = 1000

    time_d = timeit.timeit(lambda: kruskal_mst(d_input, distance,0), number=num_trials)
    time_s = timeit.timeit(lambda: kruskal_mst(s_input, distance,0), number=num_trials)
    time_a = timeit.timeit(lambda: kruskal_mst(a_input, distance,0), number=num_trials)

    time_dense = timeit.timeit(lambda: kruskal_mst(dense_graph_input, distance,0), number=num_trials)
    time_sparse = timeit.timeit(lambda: kruskal_mst(sparse_graph_input, distance,0), number=num_trials)
    time_avg = timeit.timeit(lambda: kruskal_mst(average_graph_input, distance,0), number=num_trials)

    time_dense = timeit.timeit(lambda: kruskal_mst(dense_input, distance,0), number=num_trials)
    time_sparse = timeit.timeit(lambda: kruskal_mst(sparse_input, distance,0), number=num_trials)
    time_avg = timeit.timeit(lambda: kruskal_mst(avgerage_input, distance,0), number=num_trials)


    # mst_dense, non_mst_dense = kruskal_mst(d_input, distance,1)
    # mst_sparse, non_mst_sparse = kruskal_mst(s_input, distance,1)
    # mst_avg, non_mst_avg = kruskal_mst(a_input, distance,1)

    # visualize_graph(dense_graph_input, mst_dense,total_distance_dense)
    # visualize_graph(sparse_graph_input, mst_sparse, total_distance_sparse)
    # visualize_graph(average_graph_input, mst_a, total_distance_average)

    print("Results from Kruskal's Algorithm:")
    print("MST Distance from Kruskal's for Dense:", distance[0])
    print("MST Distance from Kruskal's for Sparse:", distance[1])
    print("MST Distance from Kruskal's for Average Input Graph:", distance[2])

    print("Execution Time from Kruskal's Dense Graph Input:", time_dense)
    print("Execution Time from Kruskal's Sparse Graph Input:", time_sparse)
    print("Execution Time from Kruskal's Average Graph Input:", time_avg)
    print("Execution Time from Kruskal's Dense Graph Input:", time_ddense)
    print("Execution Time from Kruskal's Sparse Graph Input:", time_ssparse)
    print("Execution Time from Kruskal's Average Graph Input:", time_aavg)
    print("Execution Time from Kruskal's Dense Graph Input:", time_d)
    print("Execution Time from Kruskal's Sparse Graph Input:", time_s)
    print("Execution Time from Kruskal's Average Graph Input:", time_a)

    graph_types = ['Dense', 'Sparse', 'Average']
    execution_times = [2.322775293999257, 0.2855095290000463, 0.3668741839997165]
    execution = [5.322775293999257, 0.10059233999931166, 1.6176021359995502]
    e = [0.0136689060007120133, 0.001643291000116733, 0.0032198349998812773]

    plt.bar(graph_types, e, color=['blue', 'green', 'orange'])
    plt.xlabel('Graph Type')
    plt.ylabel('Execution Time (s)')
    plt.title('Kruskal\'s Algorithm Performance for 7 Vertices')
    plt.show()

    plt.bar(graph_types, execution_times, color=['blue', 'green', 'orange'])
    plt.xlabel('Graph Type')
    plt.ylabel('Execution Time (s)')
    plt.title('Kruskal\'s Algorithm Performance for 25 Vertices')
    plt.show()

    plt.bar(graph_types, execution, color=['blue', 'green', 'orange'])
    plt.xlabel('Graph Type')
    plt.ylabel('Execution Time (s)')
    plt.title('Kruskal\'s Algorithm Performance for 75 Vertices')
    plt.show()
